/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
import { fade } from '../animation-presets/fade.animation-preset';
import { slide } from '../animation-presets/slide.animation-preset';
/**
 * Notifier animation service
 */
import * as ɵngcc0 from '@angular/core';
var NotifierAnimationService = /** @class */ (function () {
    /**
     * Constructor
     */
    function NotifierAnimationService() {
        this.animationPresets = {
            fade: fade,
            slide: slide
        };
    }
    /**
     * Get animation data
     *
     * This method generates all data the Web Animations API needs to animate our notification. The result depends on both the animation
     * direction (either in or out) as well as the notifications (and its attributes) itself.
     *
     * @param   direction    Animation direction, either in or out
     * @param   notification Notification the animation data should be generated for
     * @returns Animation information
     */
    /**
     * Get animation data
     *
     * This method generates all data the Web Animations API needs to animate our notification. The result depends on both the animation
     * direction (either in or out) as well as the notifications (and its attributes) itself.
     *
     * @param {?} direction    Animation direction, either in or out
     * @param {?} notification Notification the animation data should be generated for
     * @return {?} Animation information
     */
    NotifierAnimationService.prototype.getAnimationData = /**
     * Get animation data
     *
     * This method generates all data the Web Animations API needs to animate our notification. The result depends on both the animation
     * direction (either in or out) as well as the notifications (and its attributes) itself.
     *
     * @param {?} direction    Animation direction, either in or out
     * @param {?} notification Notification the animation data should be generated for
     * @return {?} Animation information
     */
    function (direction, notification) {
        // Get all necessary animation data
        /** @type {?} */
        var keyframes;
        /** @type {?} */
        var duration;
        /** @type {?} */
        var easing;
        if (direction === 'show') {
            keyframes = this.animationPresets[notification.component.getConfig().animations.show.preset].show(notification);
            duration = notification.component.getConfig().animations.show.speed;
            easing = notification.component.getConfig().animations.show.easing;
        }
        else {
            keyframes = this.animationPresets[notification.component.getConfig().animations.hide.preset].hide(notification);
            duration = notification.component.getConfig().animations.hide.speed;
            easing = notification.component.getConfig().animations.hide.easing;
        }
        // Build and return animation data
        return {
            keyframes: [
                keyframes.from,
                keyframes.to
            ],
            options: {
                duration: duration,
                easing: easing,
                fill: 'forwards' // Keep the newly painted state after the animation finished
            }
        };
    };
    /** @nocollapse */
    NotifierAnimationService.ctorParameters = function () { return []; };
NotifierAnimationService.ɵfac = function NotifierAnimationService_Factory(t) { return new (t || NotifierAnimationService)(); };
NotifierAnimationService.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: NotifierAnimationService, factory: function (t) { return NotifierAnimationService.ɵfac(t); } });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(NotifierAnimationService, [{
        type: Injectable
    }], function () { return []; }, null); })();
    return NotifierAnimationService;
}());
export { NotifierAnimationService };
if (false) {
    /**
     * List of animation presets (currently static)
     * @type {?}
     * @private
     */
    NotifierAnimationService.prototype.animationPresets;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibm90aWZpZXItYW5pbWF0aW9uLnNlcnZpY2UuanMiLCJzb3VyY2VzIjpbIm5nOi9hbmd1bGFyLW5vdGlmaWVyL2xpYi9zZXJ2aWNlcy9ub3RpZmllci1hbmltYXRpb24uc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUkzQyxPQUFPLEVBQUUsSUFBSSxFQUFFLE1BQU0sNENBQTRDLENBQUM7QUFDbEUsT0FBTyxFQUFFLEtBQUssRUFBRSxNQUFNLDZDQUE2QyxDQUFDO0FBQ3BFO0FBQ0c7QUFDMEI7O0FBRTdCO0FBSUEsSUFNQztBQUNEO0FBQ0csT0FBQztBQUNKLElBQUM7QUFDYyxRQUFiLElBQUksQ0FBQyxnQkFBZ0IsR0FBRztBQUMxQixZQUFHLElBQUksTUFBQTtBQUNQLFlBQUcsS0FBSyxPQUFBO0FBQ1IsU0FBRyxDQUFDO0FBQ0osSUFBQyxDQUFDO0FBQ0YsSUFDQztBQUNEO0FBQ0c7QUFDRztBQUNHO0FBRUQ7QUFBTztBQUNHO0FBQ0c7QUFFRixPQURmO0FBQ0o7QUFBUTtBQUEwQjtBQUFPO0FBR2xCO0FBR0g7QUFBTztBQUNxQztBQUNqQztBQUMvQjtBQUFRLElBVEEsbURBQWdCO0FBQU87QUFBMEI7QUFBTztBQUdsQjtBQUluQztBQUFPO0FBQXFFO0FBQ2pDO0FBQy9CO0FBQVEsSUFUOUIsVUFBeUIsU0FBMEIsRUFBRSxZQUFrQztBQUFJO0FBRXpFO0FBQ2IsWUFBQSxTQUEyQztBQUNqRDtBQUNDLFlBREssUUFBZ0I7QUFDdEI7QUFDRyxZQURHLE1BQWM7QUFDcEIsUUFBRSxJQUFLLFNBQVMsS0FBSyxNQUFNLEVBQUc7QUFDOUIsWUFBRyxTQUFTLEdBQUcsSUFBSSxDQUFDLGdCQUFnQixDQUFFLFlBQVksQ0FBQyxTQUFTLENBQUMsU0FBUyxFQUFFLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUUsQ0FBQyxJQUFJLENBQUUsWUFBWSxDQUFFLENBQUM7QUFDdkgsWUFBRyxRQUFRLEdBQUcsWUFBWSxDQUFDLFNBQVMsQ0FBQyxTQUFTLEVBQUUsQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQztBQUN2RSxZQUFHLE1BQU0sR0FBRyxZQUFZLENBQUMsU0FBUyxDQUFDLFNBQVMsRUFBRSxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDO0FBQ3RFLFNBQUc7QUFBQyxhQUFLO0FBQ1QsWUFBRyxTQUFTLEdBQUcsSUFBSSxDQUFDLGdCQUFnQixDQUFFLFlBQVksQ0FBQyxTQUFTLENBQUMsU0FBUyxFQUFFLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUUsQ0FBQyxJQUFJLENBQUUsWUFBWSxDQUFFLENBQUM7QUFDdkgsWUFBRyxRQUFRLEdBQUcsWUFBWSxDQUFDLFNBQVMsQ0FBQyxTQUFTLEVBQUUsQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQztBQUN2RSxZQUFHLE1BQU0sR0FBRyxZQUFZLENBQUMsU0FBUyxDQUFDLFNBQVMsRUFBRSxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDO0FBQ3RFLFNBQUc7QUFDSCxRQUNFLGtDQUFrQztBQUNwQyxRQUFFLE9BQU87QUFDVCxZQUFHLFNBQVMsRUFBRTtBQUNkLGdCQUFJLFNBQVMsQ0FBQyxJQUFJO0FBQ2xCLGdCQUFJLFNBQVMsQ0FBQyxFQUFFO0FBQ2hCLGFBQUk7QUFDSixZQUFHLE9BQU8sRUFBRTtBQUNaLGdCQUFJLFFBQVEsVUFBQTtBQUNaLGdCQUFJLE1BQU0sUUFBQTtBQUNWLGdCQUFJLElBQUksRUFBRSxVQUFVLENBQUMsNERBQTREO0FBQ2pGLGFBQUk7QUFDSixTQUFHLENBQUM7QUFDSixJQUNDLENBQUMsQ0ExREk7QUFBQztxQ0FETixVQUFVLC9DQUNtQjs7Ozs7Z0RBSzNCO0FBQUMsSUF1REosK0JBQUM7QUFDQSxDQURBLEFBN0RELElBNkRDO0FBQ0QsU0E3RGEsd0JBQXdCO0FBRXJDO0FBQ1E7QUFBUTtBQUVGO0FBQWlCO0FBQ3RCO0FBQVEsSUFEaEIsb0RBRUU7QUFDSDtBQUNDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuXG5pbXBvcnQgeyBOb3RpZmllckFuaW1hdGlvbkRhdGEsIE5vdGlmaWVyQW5pbWF0aW9uUHJlc2V0LCBOb3RpZmllckFuaW1hdGlvblByZXNldEtleWZyYW1lcyB9IGZyb20gJy4uL21vZGVscy9ub3RpZmllci1hbmltYXRpb24ubW9kZWwnO1xuaW1wb3J0IHsgTm90aWZpZXJOb3RpZmljYXRpb24gfSBmcm9tICcuLi9tb2RlbHMvbm90aWZpZXItbm90aWZpY2F0aW9uLm1vZGVsJztcbmltcG9ydCB7IGZhZGUgfSBmcm9tICcuLi9hbmltYXRpb24tcHJlc2V0cy9mYWRlLmFuaW1hdGlvbi1wcmVzZXQnO1xuaW1wb3J0IHsgc2xpZGUgfSBmcm9tICcuLi9hbmltYXRpb24tcHJlc2V0cy9zbGlkZS5hbmltYXRpb24tcHJlc2V0JztcblxuLyoqXG4gKiBOb3RpZmllciBhbmltYXRpb24gc2VydmljZVxuICovXG5ASW5qZWN0YWJsZSgpXG5leHBvcnQgY2xhc3MgTm90aWZpZXJBbmltYXRpb25TZXJ2aWNlIHtcblxuXHQvKipcblx0ICogTGlzdCBvZiBhbmltYXRpb24gcHJlc2V0cyAoY3VycmVudGx5IHN0YXRpYylcblx0ICovXG5cdHByaXZhdGUgcmVhZG9ubHkgYW5pbWF0aW9uUHJlc2V0czoge1xuXHRcdFsgYW5pbWF0aW9uUHJlc2V0TmFtZTogc3RyaW5nIF06IE5vdGlmaWVyQW5pbWF0aW9uUHJlc2V0XG5cdH07XG5cblx0LyoqXG5cdCAqIENvbnN0cnVjdG9yXG5cdCAqL1xuXHRwdWJsaWMgY29uc3RydWN0b3IoKSB7XG5cdFx0dGhpcy5hbmltYXRpb25QcmVzZXRzID0ge1xuXHRcdFx0ZmFkZSxcblx0XHRcdHNsaWRlXG5cdFx0fTtcblx0fVxuXG5cdC8qKlxuXHQgKiBHZXQgYW5pbWF0aW9uIGRhdGFcblx0ICpcblx0ICogVGhpcyBtZXRob2QgZ2VuZXJhdGVzIGFsbCBkYXRhIHRoZSBXZWIgQW5pbWF0aW9ucyBBUEkgbmVlZHMgdG8gYW5pbWF0ZSBvdXIgbm90aWZpY2F0aW9uLiBUaGUgcmVzdWx0IGRlcGVuZHMgb24gYm90aCB0aGUgYW5pbWF0aW9uXG5cdCAqIGRpcmVjdGlvbiAoZWl0aGVyIGluIG9yIG91dCkgYXMgd2VsbCBhcyB0aGUgbm90aWZpY2F0aW9ucyAoYW5kIGl0cyBhdHRyaWJ1dGVzKSBpdHNlbGYuXG5cdCAqXG5cdCAqIEBwYXJhbSAgIGRpcmVjdGlvbiAgICBBbmltYXRpb24gZGlyZWN0aW9uLCBlaXRoZXIgaW4gb3Igb3V0XG5cdCAqIEBwYXJhbSAgIG5vdGlmaWNhdGlvbiBOb3RpZmljYXRpb24gdGhlIGFuaW1hdGlvbiBkYXRhIHNob3VsZCBiZSBnZW5lcmF0ZWQgZm9yXG5cdCAqIEByZXR1cm5zIEFuaW1hdGlvbiBpbmZvcm1hdGlvblxuXHQgKi9cblx0cHVibGljIGdldEFuaW1hdGlvbkRhdGEoIGRpcmVjdGlvbjogJ3Nob3cnIHwgJ2hpZGUnLCBub3RpZmljYXRpb246IE5vdGlmaWVyTm90aWZpY2F0aW9uICk6IE5vdGlmaWVyQW5pbWF0aW9uRGF0YSB7XG5cblx0XHQvLyBHZXQgYWxsIG5lY2Vzc2FyeSBhbmltYXRpb24gZGF0YVxuXHRcdGxldCBrZXlmcmFtZXM6IE5vdGlmaWVyQW5pbWF0aW9uUHJlc2V0S2V5ZnJhbWVzO1xuXHRcdGxldCBkdXJhdGlvbjogbnVtYmVyO1xuXHRcdGxldCBlYXNpbmc6IHN0cmluZztcblx0XHRpZiAoIGRpcmVjdGlvbiA9PT0gJ3Nob3cnICkge1xuXHRcdFx0a2V5ZnJhbWVzID0gdGhpcy5hbmltYXRpb25QcmVzZXRzWyBub3RpZmljYXRpb24uY29tcG9uZW50LmdldENvbmZpZygpLmFuaW1hdGlvbnMuc2hvdy5wcmVzZXQgXS5zaG93KCBub3RpZmljYXRpb24gKTtcblx0XHRcdGR1cmF0aW9uID0gbm90aWZpY2F0aW9uLmNvbXBvbmVudC5nZXRDb25maWcoKS5hbmltYXRpb25zLnNob3cuc3BlZWQ7XG5cdFx0XHRlYXNpbmcgPSBub3RpZmljYXRpb24uY29tcG9uZW50LmdldENvbmZpZygpLmFuaW1hdGlvbnMuc2hvdy5lYXNpbmc7XG5cdFx0fSBlbHNlIHtcblx0XHRcdGtleWZyYW1lcyA9IHRoaXMuYW5pbWF0aW9uUHJlc2V0c1sgbm90aWZpY2F0aW9uLmNvbXBvbmVudC5nZXRDb25maWcoKS5hbmltYXRpb25zLmhpZGUucHJlc2V0IF0uaGlkZSggbm90aWZpY2F0aW9uICk7XG5cdFx0XHRkdXJhdGlvbiA9IG5vdGlmaWNhdGlvbi5jb21wb25lbnQuZ2V0Q29uZmlnKCkuYW5pbWF0aW9ucy5oaWRlLnNwZWVkO1xuXHRcdFx0ZWFzaW5nID0gbm90aWZpY2F0aW9uLmNvbXBvbmVudC5nZXRDb25maWcoKS5hbmltYXRpb25zLmhpZGUuZWFzaW5nO1xuXHRcdH1cblxuXHRcdC8vIEJ1aWxkIGFuZCByZXR1cm4gYW5pbWF0aW9uIGRhdGFcblx0XHRyZXR1cm4ge1xuXHRcdFx0a2V5ZnJhbWVzOiBbXG5cdFx0XHRcdGtleWZyYW1lcy5mcm9tLFxuXHRcdFx0XHRrZXlmcmFtZXMudG9cblx0XHRcdF0sXG5cdFx0XHRvcHRpb25zOiB7XG5cdFx0XHRcdGR1cmF0aW9uLFxuXHRcdFx0XHRlYXNpbmcsXG5cdFx0XHRcdGZpbGw6ICdmb3J3YXJkcycgLy8gS2VlcCB0aGUgbmV3bHkgcGFpbnRlZCBzdGF0ZSBhZnRlciB0aGUgYW5pbWF0aW9uIGZpbmlzaGVkXG5cdFx0XHR9XG5cdFx0fTtcblxuXHR9XG5cbn1cbiJdfQ==