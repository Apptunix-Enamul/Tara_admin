/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Inject, Injectable } from '@angular/core';
import { NotifierConfig } from '../models/notifier-config.model';
import { NotifierQueueService } from './notifier-queue.service';
import { NotifierConfigToken } from '../notifier.tokens';
/**
 * Notifier service
 *
 * This service provides access to the public notifier API. Once injected into a component, directive, pipe, service, or any other building
 * block of an applications, it can be used to show new notifications, and hide existing ones. Internally, it transforms API calls into
 * actions, which then get thrown into the action queue - eventually being processed at the right moment.
 */
import * as ɵngcc0 from '@angular/core';
var NotifierService = /** @class */ (function () {
    /**
     * Constructor
     *
     * @param notifierQueueService Notifier queue service
     * @param config               Notifier configuration, optionally injected as a dependency
     */
    function NotifierService(notifierQueueService, config) {
        this.queueService = notifierQueueService;
        this.config = config;
    }
    /**
     * Get the notifier configuration
     *
     * @returns Notifier configuration
     */
    /**
     * Get the notifier configuration
     *
     * @return {?} Notifier configuration
     */
    NotifierService.prototype.getConfig = /**
     * Get the notifier configuration
     *
     * @return {?} Notifier configuration
     */
    function () {
        return this.config;
    };
    /**
     * API: Show a new notification
     *
     * @param notificationOptions Notification options
     */
    /**
     * API: Show a new notification
     *
     * @param {?} notificationOptions Notification options
     * @return {?}
     */
    NotifierService.prototype.show = /**
     * API: Show a new notification
     *
     * @param {?} notificationOptions Notification options
     * @return {?}
     */
    function (notificationOptions) {
        this.queueService.push({
            payload: notificationOptions,
            type: 'SHOW'
        });
    };
    /**
     * API: Hide a specific notification, given its ID
     *
     * @param notificationId ID of the notification to hide
     */
    /**
     * API: Hide a specific notification, given its ID
     *
     * @param {?} notificationId ID of the notification to hide
     * @return {?}
     */
    NotifierService.prototype.hide = /**
     * API: Hide a specific notification, given its ID
     *
     * @param {?} notificationId ID of the notification to hide
     * @return {?}
     */
    function (notificationId) {
        this.queueService.push({
            payload: notificationId,
            type: 'HIDE'
        });
    };
    /**
     * API: Hide the newest notification
     */
    /**
     * API: Hide the newest notification
     * @return {?}
     */
    NotifierService.prototype.hideNewest = /**
     * API: Hide the newest notification
     * @return {?}
     */
    function () {
        this.queueService.push({
            type: 'HIDE_NEWEST'
        });
    };
    /**
     * API: Hide the oldest notification
     */
    /**
     * API: Hide the oldest notification
     * @return {?}
     */
    NotifierService.prototype.hideOldest = /**
     * API: Hide the oldest notification
     * @return {?}
     */
    function () {
        this.queueService.push({
            type: 'HIDE_OLDEST'
        });
    };
    /**
     * API: Hide all notifications at once
     */
    /**
     * API: Hide all notifications at once
     * @return {?}
     */
    NotifierService.prototype.hideAll = /**
     * API: Hide all notifications at once
     * @return {?}
     */
    function () {
        this.queueService.push({
            type: 'HIDE_ALL'
        });
    };
    /**
     * API: Shortcut for showing a new notification
     *
     * @param type             Type of the notification
     * @param message          Message of the notification
     * @param [notificationId] Unique ID for the notification (optional)
     */
    /**
     * API: Shortcut for showing a new notification
     *
     * @param {?} type             Type of the notification
     * @param {?} message          Message of the notification
     * @param {?=} notificationId
     * @return {?}
     */
    NotifierService.prototype.notify = /**
     * API: Shortcut for showing a new notification
     *
     * @param {?} type             Type of the notification
     * @param {?} message          Message of the notification
     * @param {?=} notificationId
     * @return {?}
     */
    function (type, message, notificationId) {
        /** @type {?} */
        var notificationOptions = {
            message: message,
            type: type
        };
        if (notificationId !== undefined) {
            notificationOptions.id = notificationId;
        }
        this.show(notificationOptions);
    };
    /** @nocollapse */
    NotifierService.ctorParameters = function () { return [
        { type: NotifierQueueService },
        { type: NotifierConfig, decorators: [{ type: Inject, args: [NotifierConfigToken,] }] }
    ]; };
NotifierService.ɵfac = function NotifierService_Factory(t) { return new (t || NotifierService)(ɵngcc0.ɵɵinject(NotifierQueueService), ɵngcc0.ɵɵinject(NotifierConfigToken)); };
NotifierService.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: NotifierService, factory: function (t) { return NotifierService.ɵfac(t); } });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(NotifierService, [{
        type: Injectable
    }], function () { return [{ type: NotifierQueueService }, { type: NotifierConfig, decorators: [{
                type: Inject,
                args: [NotifierConfigToken]
            }] }]; }, null); })();
    return NotifierService;
}());
export { NotifierService };
if (false) {
    /**
     * Notifier queue service
     * @type {?}
     * @private
     */
    NotifierService.prototype.queueService;
    /**
     * Notifier configuration
     * @type {?}
     * @private
     */
    NotifierService.prototype.config;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibm90aWZpZXIuc2VydmljZS5qcyIsInNvdXJjZXMiOlsibmc6L2FuZ3VsYXItbm90aWZpZXIvbGliL3NlcnZpY2VzL25vdGlmaWVyLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBRSxNQUFNLEVBQUUsVUFBVSxFQUFjLE1BQU0sZUFBZSxDQUFDO0FBRS9ELE9BQU8sRUFBRSxjQUFjLEVBQUUsTUFBTSxpQ0FBaUMsQ0FBQztBQUVqRSxPQUFPLEVBQUUsb0JBQW9CLEVBQUUsTUFBTSwwQkFBMEIsQ0FBQztBQUNoRSxPQUFPLEVBQUUsbUJBQW1CLEVBQUUsTUFBTSxvQkFBb0IsQ0FBQztBQUN6RDtBQUNHO0FBQ2dCO0FBQ2pCO0FBQ3lJO0FBQ0o7QUFDOUI7O0FBRXpHO0FBSUEsSUFTQztBQUNEO0FBQ0c7QUFDRztBQUNHO0FBRUYsT0FESDtBQUNKLElBQUMseUJBQ0Msb0JBQTBDLEVBQ2IsTUFBc0I7QUFDbEQsUUFDRCxJQUFJLENBQUMsWUFBWSxHQUFHLG9CQUFvQixDQUFDO0FBQzNDLFFBQUUsSUFBSSxDQUFDLE1BQU0sR0FBRyxNQUFNLENBQUM7QUFDdkIsSUFBQyxDQUFDO0FBQ0YsSUFDQztBQUNEO0FBQ0c7QUFDRztBQUVGLE9BREE7QUFDSjtBQUFRO0FBQ0E7QUFBTztBQUlXO0FBQ3pCLElBTk8sbUNBQVM7QUFBTztBQUV0QjtBQUdGO0FBRUs7QUFBUSxJQVBaO0FBQWMsUUFDYixPQUFPLElBQUksQ0FBQyxNQUFNLENBQUM7QUFDckIsSUFBQyxDQUFDO0FBRUYsSUFBQztBQUNEO0FBQ0c7QUFDRztBQUVGLE9BREE7QUFDSjtBQUFRO0FBQW9DO0FBQU87QUFFMUM7QUFBbUI7QUFDekIsSUFISyw4QkFBSTtBQUFPO0FBQW9DO0FBQU87QUFFMUM7QUFDZDtBQUFRLElBSGIsVUFBYSxtQkFBZ0Q7QUFBSSxRQUNoRSxJQUFJLENBQUMsWUFBWSxDQUFDLElBQUksQ0FBRTtBQUMxQixZQUFHLE9BQU8sRUFBRSxtQkFBbUI7QUFDL0IsWUFBRyxJQUFJLEVBQUUsTUFBTTtBQUNmLFNBQUcsQ0FBRSxDQUFDO0FBQ04sSUFBQyxDQUFDO0FBRUYsSUFBQztBQUNEO0FBQ0c7QUFDRztBQUVGLE9BREE7QUFDSjtBQUFRO0FBQ1E7QUFBTztBQU1uQjtBQUNjO0FBQVEsSUFSbEIsOEJBQUk7QUFBTztBQUNRO0FBQ3JCO0FBTUk7QUFBbUI7QUFBUSxJQVJwQyxVQUFhLGNBQXNCO0FBQUksUUFDdEMsSUFBSSxDQUFDLFlBQVksQ0FBQyxJQUFJLENBQUU7QUFDMUIsWUFBRyxPQUFPLEVBQUUsY0FBYztBQUMxQixZQUFHLElBQUksRUFBRSxNQUFNO0FBQ2YsU0FBRyxDQUFFLENBQUM7QUFDTixJQUFDLENBQUM7QUFFRixJQUFDO0FBQ0Q7QUFDRyxPQUFDO0FBQ0o7QUFBUTtBQUNZO0FBQ1Q7QUFBUSxJQUZYLG9DQUFVO0FBQU87QUFFaEI7QUFDSjtBQUdILElBTkQ7QUFBYyxRQUNiLElBQUksQ0FBQyxZQUFZLENBQUMsSUFBSSxDQUFFO0FBQzFCLFlBQUcsSUFBSSxFQUFFLGFBQWE7QUFDdEIsU0FBRyxDQUFFLENBQUM7QUFDTixJQUFDLENBQUM7QUFFRixJQUFDO0FBQ0Q7QUFDRyxPQUFDO0FBQ0o7QUFBUTtBQUNZO0FBQ1Q7QUFBUSxJQUZYLG9DQUFVO0FBQU87QUFFaEI7QUFDSjtBQUdILElBTkQ7QUFBYyxRQUNiLElBQUksQ0FBQyxZQUFZLENBQUMsSUFBSSxDQUFFO0FBQzFCLFlBQUcsSUFBSSxFQUFFLGFBQWE7QUFDdEIsU0FBRyxDQUFFLENBQUM7QUFDTixJQUFDLENBQUM7QUFFRixJQUFDO0FBQ0Q7QUFDRyxPQUFDO0FBQ0o7QUFBUTtBQUNpQjtBQUNUO0FBQ1osSUFISSxpQ0FBTztBQUFPO0FBRVg7QUFHWDtBQUVFLElBUEQ7QUFBYyxRQUNiLElBQUksQ0FBQyxZQUFZLENBQUMsSUFBSSxDQUFFO0FBQzFCLFlBQUcsSUFBSSxFQUFFLFVBQVU7QUFDbkIsU0FBRyxDQUFFLENBQUM7QUFDTixJQUFDLENBQUM7QUFFRixJQUFDO0FBQ0Q7QUFDRztBQUNHO0FBQ0c7QUFDRztBQUVGLE9BRE47QUFDSjtBQUFRO0FBQW9EO0FBQU87QUFDckI7QUFJckI7QUFDTjtBQUFtQjtBQUNwQyxJQVBNLGdDQUFNO0FBQU87QUFBb0Q7QUFBTztBQUVoRjtBQUdzQztBQUNOO0FBRTdCO0FBQVEsSUFSVixVQUFlLElBQVksRUFBRSxPQUFlLEVBQUUsY0FBdUI7QUFBSTtBQUN4RCxZQUFaLG1CQUFtQixHQUFnQztBQUN6RCxZQUFHLE9BQU8sU0FBQTtBQUNWLFlBQUcsSUFBSSxNQUFBO0FBQ1AsU0FBRztBQUNILFFBQUUsSUFBSyxjQUFjLEtBQUssU0FBUyxFQUFHO0FBQ3RDLFlBQUcsbUJBQW1CLENBQUMsRUFBRSxHQUFHLGNBQWMsQ0FBQztBQUMzQyxTQUFHO0FBQ0gsUUFBRSxJQUFJLENBQUMsSUFBSSxDQUFFLG1CQUFtQixDQUFFLENBQUM7QUFDbkMsSUFBQyxDQUFDLENBdEdJO0FBQUM7NEJBRE4sVUFBVSx0Q0FDbUI7QUFLVCxnQkFoQlosb0JBQW9CO0FBQUksZ0JBRnhCLGNBQWMsdUJBaUNwQixNQUFNLFNBQUMsbUJBQW1CO0FBQVE7Ozs7Ozs7O2tDQUFTO0FBQUMsSUFvRi9DLHNCQUFDO0FBQ0EsQ0FEQSxBQXpHRCxJQXlHQztBQUNELFNBekdhLGVBQWU7QUFFNUI7QUFDUTtBQUFRO0FBRUY7QUFBaUI7QUFBZ0I7QUFFL0MsSUFGQyx1Q0FBb0Q7QUFDckQ7QUFFRTtBQUVGO0FBQWlCO0FBQWdCO0FBQVEsSUFBeEMsaUNBQXdDO0FBQ3pDO0FBQ0MiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3QsIEluamVjdGFibGUsIGZvcndhcmRSZWYgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcblxuaW1wb3J0IHsgTm90aWZpZXJDb25maWcgfSBmcm9tICcuLi9tb2RlbHMvbm90aWZpZXItY29uZmlnLm1vZGVsJztcbmltcG9ydCB7IE5vdGlmaWVyTm90aWZpY2F0aW9uT3B0aW9ucyB9IGZyb20gJy4uL21vZGVscy9ub3RpZmllci1ub3RpZmljYXRpb24ubW9kZWwnO1xuaW1wb3J0IHsgTm90aWZpZXJRdWV1ZVNlcnZpY2UgfSBmcm9tICcuL25vdGlmaWVyLXF1ZXVlLnNlcnZpY2UnO1xuaW1wb3J0IHsgTm90aWZpZXJDb25maWdUb2tlbiB9IGZyb20gJy4uL25vdGlmaWVyLnRva2Vucyc7XG5cbi8qKlxuICogTm90aWZpZXIgc2VydmljZVxuICpcbiAqIFRoaXMgc2VydmljZSBwcm92aWRlcyBhY2Nlc3MgdG8gdGhlIHB1YmxpYyBub3RpZmllciBBUEkuIE9uY2UgaW5qZWN0ZWQgaW50byBhIGNvbXBvbmVudCwgZGlyZWN0aXZlLCBwaXBlLCBzZXJ2aWNlLCBvciBhbnkgb3RoZXIgYnVpbGRpbmdcbiAqIGJsb2NrIG9mIGFuIGFwcGxpY2F0aW9ucywgaXQgY2FuIGJlIHVzZWQgdG8gc2hvdyBuZXcgbm90aWZpY2F0aW9ucywgYW5kIGhpZGUgZXhpc3Rpbmcgb25lcy4gSW50ZXJuYWxseSwgaXQgdHJhbnNmb3JtcyBBUEkgY2FsbHMgaW50b1xuICogYWN0aW9ucywgd2hpY2ggdGhlbiBnZXQgdGhyb3duIGludG8gdGhlIGFjdGlvbiBxdWV1ZSAtIGV2ZW50dWFsbHkgYmVpbmcgcHJvY2Vzc2VkIGF0IHRoZSByaWdodCBtb21lbnQuXG4gKi9cbkBJbmplY3RhYmxlKClcbmV4cG9ydCBjbGFzcyBOb3RpZmllclNlcnZpY2Uge1xuXG5cdC8qKlxuXHQgKiBOb3RpZmllciBxdWV1ZSBzZXJ2aWNlXG5cdCAqL1xuXHRwcml2YXRlIHJlYWRvbmx5IHF1ZXVlU2VydmljZTogTm90aWZpZXJRdWV1ZVNlcnZpY2U7XG5cblx0LyoqXG5cdCAqIE5vdGlmaWVyIGNvbmZpZ3VyYXRpb25cblx0ICovXG5cdHByaXZhdGUgcmVhZG9ubHkgY29uZmlnOiBOb3RpZmllckNvbmZpZztcblxuXHQvKipcblx0ICogQ29uc3RydWN0b3Jcblx0ICpcblx0ICogQHBhcmFtIG5vdGlmaWVyUXVldWVTZXJ2aWNlIE5vdGlmaWVyIHF1ZXVlIHNlcnZpY2Vcblx0ICogQHBhcmFtIGNvbmZpZyAgICAgICAgICAgICAgIE5vdGlmaWVyIGNvbmZpZ3VyYXRpb24sIG9wdGlvbmFsbHkgaW5qZWN0ZWQgYXMgYSBkZXBlbmRlbmN5XG5cdCAqL1xuXHRwdWJsaWMgY29uc3RydWN0b3IoXG5cdFx0bm90aWZpZXJRdWV1ZVNlcnZpY2U6IE5vdGlmaWVyUXVldWVTZXJ2aWNlLFxuXHRcdEBJbmplY3QoTm90aWZpZXJDb25maWdUb2tlbikgY29uZmlnOiBOb3RpZmllckNvbmZpZ1xuXHQpIHtcblx0XHR0aGlzLnF1ZXVlU2VydmljZSA9IG5vdGlmaWVyUXVldWVTZXJ2aWNlO1xuXHRcdHRoaXMuY29uZmlnID0gY29uZmlnO1xuXHR9XG5cblx0LyoqXG5cdCAqIEdldCB0aGUgbm90aWZpZXIgY29uZmlndXJhdGlvblxuXHQgKlxuXHQgKiBAcmV0dXJucyBOb3RpZmllciBjb25maWd1cmF0aW9uXG5cdCAqL1xuXHRwdWJsaWMgZ2V0Q29uZmlnKCk6IE5vdGlmaWVyQ29uZmlnIHtcblx0XHRyZXR1cm4gdGhpcy5jb25maWc7XG5cdH1cblxuXHQvKipcblx0ICogQVBJOiBTaG93IGEgbmV3IG5vdGlmaWNhdGlvblxuXHQgKlxuXHQgKiBAcGFyYW0gbm90aWZpY2F0aW9uT3B0aW9ucyBOb3RpZmljYXRpb24gb3B0aW9uc1xuXHQgKi9cblx0cHVibGljIHNob3coIG5vdGlmaWNhdGlvbk9wdGlvbnM6IE5vdGlmaWVyTm90aWZpY2F0aW9uT3B0aW9ucyApOiB2b2lkIHtcblx0XHR0aGlzLnF1ZXVlU2VydmljZS5wdXNoKCB7XG5cdFx0XHRwYXlsb2FkOiBub3RpZmljYXRpb25PcHRpb25zLFxuXHRcdFx0dHlwZTogJ1NIT1cnXG5cdFx0fSApO1xuXHR9XG5cblx0LyoqXG5cdCAqIEFQSTogSGlkZSBhIHNwZWNpZmljIG5vdGlmaWNhdGlvbiwgZ2l2ZW4gaXRzIElEXG5cdCAqXG5cdCAqIEBwYXJhbSBub3RpZmljYXRpb25JZCBJRCBvZiB0aGUgbm90aWZpY2F0aW9uIHRvIGhpZGVcblx0ICovXG5cdHB1YmxpYyBoaWRlKCBub3RpZmljYXRpb25JZDogc3RyaW5nICk6IHZvaWQge1xuXHRcdHRoaXMucXVldWVTZXJ2aWNlLnB1c2goIHtcblx0XHRcdHBheWxvYWQ6IG5vdGlmaWNhdGlvbklkLFxuXHRcdFx0dHlwZTogJ0hJREUnXG5cdFx0fSApO1xuXHR9XG5cblx0LyoqXG5cdCAqIEFQSTogSGlkZSB0aGUgbmV3ZXN0IG5vdGlmaWNhdGlvblxuXHQgKi9cblx0cHVibGljIGhpZGVOZXdlc3QoKTogdm9pZCB7XG5cdFx0dGhpcy5xdWV1ZVNlcnZpY2UucHVzaCgge1xuXHRcdFx0dHlwZTogJ0hJREVfTkVXRVNUJ1xuXHRcdH0gKTtcblx0fVxuXG5cdC8qKlxuXHQgKiBBUEk6IEhpZGUgdGhlIG9sZGVzdCBub3RpZmljYXRpb25cblx0ICovXG5cdHB1YmxpYyBoaWRlT2xkZXN0KCk6IHZvaWQge1xuXHRcdHRoaXMucXVldWVTZXJ2aWNlLnB1c2goIHtcblx0XHRcdHR5cGU6ICdISURFX09MREVTVCdcblx0XHR9ICk7XG5cdH1cblxuXHQvKipcblx0ICogQVBJOiBIaWRlIGFsbCBub3RpZmljYXRpb25zIGF0IG9uY2Vcblx0ICovXG5cdHB1YmxpYyBoaWRlQWxsKCk6IHZvaWQge1xuXHRcdHRoaXMucXVldWVTZXJ2aWNlLnB1c2goIHtcblx0XHRcdHR5cGU6ICdISURFX0FMTCdcblx0XHR9ICk7XG5cdH1cblxuXHQvKipcblx0ICogQVBJOiBTaG9ydGN1dCBmb3Igc2hvd2luZyBhIG5ldyBub3RpZmljYXRpb25cblx0ICpcblx0ICogQHBhcmFtIHR5cGUgICAgICAgICAgICAgVHlwZSBvZiB0aGUgbm90aWZpY2F0aW9uXG5cdCAqIEBwYXJhbSBtZXNzYWdlICAgICAgICAgIE1lc3NhZ2Ugb2YgdGhlIG5vdGlmaWNhdGlvblxuXHQgKiBAcGFyYW0gW25vdGlmaWNhdGlvbklkXSBVbmlxdWUgSUQgZm9yIHRoZSBub3RpZmljYXRpb24gKG9wdGlvbmFsKVxuXHQgKi9cblx0cHVibGljIG5vdGlmeSggdHlwZTogc3RyaW5nLCBtZXNzYWdlOiBzdHJpbmcsIG5vdGlmaWNhdGlvbklkPzogc3RyaW5nICk6IHZvaWQge1xuXHRcdGxldCBub3RpZmljYXRpb25PcHRpb25zOiBOb3RpZmllck5vdGlmaWNhdGlvbk9wdGlvbnMgPSB7XG5cdFx0XHRtZXNzYWdlLFxuXHRcdFx0dHlwZVxuXHRcdH07XG5cdFx0aWYgKCBub3RpZmljYXRpb25JZCAhPT0gdW5kZWZpbmVkICkge1xuXHRcdFx0bm90aWZpY2F0aW9uT3B0aW9ucy5pZCA9IG5vdGlmaWNhdGlvbklkO1xuXHRcdH1cblx0XHR0aGlzLnNob3coIG5vdGlmaWNhdGlvbk9wdGlvbnMgKTtcblx0fVxuXG59XG4iXX0=