/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
/**
 * Notifier timer service
 *
 * This service acts as a timer, needed due to the still rather limited setTimeout JavaScript API. The timer service can start and stop a
 * timer. Furthermore, it can also pause the timer at any time, and resume later on. The timer API workd promise-based.
 */
import * as ɵngcc0 from '@angular/core';
var NotifierTimerService = /** @class */ (function () {
    /**
     * Constructor
     */
    function NotifierTimerService() {
        this.now = 0;
        this.remaining = 0;
    }
    /**
     * Start (or resume) the timer
     *
     * @param   duration Timer duration, in ms
     * @returns          Promise, resolved once the timer finishes
     */
    /**
     * Start (or resume) the timer
     *
     * @param {?} duration Timer duration, in ms
     * @return {?} Promise, resolved once the timer finishes
     */
    NotifierTimerService.prototype.start = /**
     * Start (or resume) the timer
     *
     * @param {?} duration Timer duration, in ms
     * @return {?} Promise, resolved once the timer finishes
     */
    function (duration) {
        var _this = this;
        return new Promise((/**
         * @param {?} resolve
         * @param {?} reject
         * @return {?}
         */
        function (resolve, reject) {
            // For the first run ...
            _this.remaining = duration;
            // Setup, then start the timer
            _this.finishPromiseResolver = resolve;
            _this.continue();
        }));
    };
    /**
     * Pause the timer
     */
    /**
     * Pause the timer
     * @return {?}
     */
    NotifierTimerService.prototype.pause = /**
     * Pause the timer
     * @return {?}
     */
    function () {
        clearTimeout(this.timerId);
        this.remaining -= new Date().getTime() - this.now;
    };
    /**
     * Continue the timer
     */
    /**
     * Continue the timer
     * @return {?}
     */
    NotifierTimerService.prototype.continue = /**
     * Continue the timer
     * @return {?}
     */
    function () {
        var _this = this;
        this.now = new Date().getTime();
        this.timerId = window.setTimeout((/**
         * @return {?}
         */
        function () {
            _this.finish();
        }), this.remaining);
    };
    /**
     * Stop the timer
     */
    /**
     * Stop the timer
     * @return {?}
     */
    NotifierTimerService.prototype.stop = /**
     * Stop the timer
     * @return {?}
     */
    function () {
        clearTimeout(this.timerId);
        this.remaining = 0;
    };
    /**
     * Finish up the timeout by resolving the timer promise
     */
    /**
     * Finish up the timeout by resolving the timer promise
     * @private
     * @return {?}
     */
    NotifierTimerService.prototype.finish = /**
     * Finish up the timeout by resolving the timer promise
     * @private
     * @return {?}
     */
    function () {
        this.finishPromiseResolver();
    };
    /** @nocollapse */
    NotifierTimerService.ctorParameters = function () { return []; };
NotifierTimerService.ɵfac = function NotifierTimerService_Factory(t) { return new (t || NotifierTimerService)(); };
NotifierTimerService.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: NotifierTimerService, factory: function (t) { return NotifierTimerService.ɵfac(t); } });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(NotifierTimerService, [{
        type: Injectable
    }], function () { return []; }, null); })();
    return NotifierTimerService;
}());
export { NotifierTimerService };
if (false) {
    /**
     * Timestamp (in ms), created in the moment the timer starts
     * @type {?}
     * @private
     */
    NotifierTimerService.prototype.now;
    /**
     * Remaining time (in ms)
     * @type {?}
     * @private
     */
    NotifierTimerService.prototype.remaining;
    /**
     * Timeout ID, used for clearing the timeout later on
     * @type {?}
     * @private
     */
    NotifierTimerService.prototype.timerId;
    /**
     * Promise resolve function, eventually getting called once the timer finishes
     * @type {?}
     * @private
     */
    NotifierTimerService.prototype.finishPromiseResolver;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibm90aWZpZXItdGltZXIuc2VydmljZS5qcyIsInNvdXJjZXMiOlsibmc6L2FuZ3VsYXItbm90aWZpZXIvbGliL3NlcnZpY2VzL25vdGlmaWVyLXRpbWVyLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDM0M7QUFDRztBQUNzQjtBQUN2QjtBQUN1STtBQUNsQjs7QUFFdkg7QUFJQSxJQW1CQztBQUNEO0FBQ0csT0FBQztBQUNKLElBQUM7QUFDVSxRQUFULElBQUksQ0FBQyxHQUFHLEdBQUcsQ0FBQyxDQUFDO0FBQ2YsUUFBRSxJQUFJLENBQUMsU0FBUyxHQUFHLENBQUMsQ0FBQztBQUNyQixJQUFDLENBQUM7QUFDRixJQUNDO0FBQ0Q7QUFDRztBQUNHO0FBQ0c7QUFFRixPQURIO0FBQ0o7QUFBUTtBQUFtQztBQUFPO0FBQ1A7QUFFdEI7QUFDcEIsSUFKTyxvQ0FBSztBQUFPO0FBQW1DO0FBQ2pEO0FBQWlEO0FBR2xEO0FBQVEsSUFKWixVQUFjLFFBQWdCO0FBQUksUUFBbEMsaUJBV0M7QUFDRixRQVhFLE9BQU8sSUFBSSxPQUFPO0FBQU07QUFBOEI7QUFFdEQ7QUFBdUI7QUFDaEIsUUFId0IsVUFBRSxPQUFtQixFQUFFLE1BQWtCO0FBQUksWUFFM0Usd0JBQXdCO0FBQzNCLFlBQUcsS0FBSSxDQUFDLFNBQVMsR0FBRyxRQUFRLENBQUM7QUFDN0IsWUFDRyw4QkFBOEI7QUFDakMsWUFBRyxLQUFJLENBQUMscUJBQXFCLEdBQUcsT0FBTyxDQUFDO0FBQ3hDLFlBQUcsS0FBSSxDQUFDLFFBQVEsRUFBRSxDQUFDO0FBQ25CLFFBQ0UsQ0FBQyxFQUFFLENBQUM7QUFDTixJQUFDLENBQUM7QUFFRixJQUFDO0FBQ0Q7QUFDRyxPQUFDO0FBQ0o7QUFBUTtBQUNEO0FBQW1CO0FBQ3hCLElBRk0sb0NBQUs7QUFBTztBQUNEO0FBQ2I7QUFBUSxJQUZiO0FBQWMsUUFDYixZQUFZLENBQUUsSUFBSSxDQUFDLE9BQU8sQ0FBRSxDQUFDO0FBQy9CLFFBQUUsSUFBSSxDQUFDLFNBQVMsSUFBSSxJQUFJLElBQUksRUFBRSxDQUFDLE9BQU8sRUFBRSxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUM7QUFDcEQsSUFBQyxDQUFDO0FBRUYsSUFBQztBQUNEO0FBQ0csT0FBQztBQUNKO0FBQVE7QUFDRDtBQUFtQjtBQUFRLElBRDFCLHVDQUFRO0FBQU87QUFDRDtBQUNoQjtBQUFRLElBRmI7QUFBYyxRQUFkLGlCQUtDO0FBQ0YsUUFMRSxJQUFJLENBQUMsR0FBRyxHQUFHLElBQUksSUFBSSxFQUFFLENBQUMsT0FBTyxFQUFFLENBQUM7QUFDbEMsUUFBRSxJQUFJLENBQUMsT0FBTyxHQUFHLE1BQU0sQ0FBQyxVQUFVO0FBQU07QUFFdkM7QUFBWSxRQUZ1QjtBQUM5QixZQUFILEtBQUksQ0FBQyxNQUFNLEVBQUUsQ0FBQztBQUNqQixRQUFFLENBQUMsR0FBRSxJQUFJLENBQUMsU0FBUyxDQUFFLENBQUM7QUFDdEIsSUFBQyxDQUFDO0FBRUYsSUFBQztBQUNEO0FBQ0csT0FBQztBQUNKO0FBQVE7QUFDRDtBQUFtQjtBQUN4QixJQUZNLG1DQUFJO0FBQU87QUFDRDtBQUNiO0FBQVEsSUFGWjtBQUFjLFFBQ2IsWUFBWSxDQUFFLElBQUksQ0FBQyxPQUFPLENBQUUsQ0FBQztBQUMvQixRQUFFLElBQUksQ0FBQyxTQUFTLEdBQUcsQ0FBQyxDQUFDO0FBQ3JCLElBQUMsQ0FBQztBQUVGLElBQUM7QUFDRDtBQUNHLE9BQUM7QUFDSjtBQUFRO0FBS0o7QUFBZ0I7QUFBbUI7QUFBUSxJQUx0QyxxQ0FBTTtBQUFPO0FBS0o7QUFBZ0I7QUFBbUI7QUFBUSxJQUw1RDtBQUFjLFFBQ2IsSUFBSSxDQUFDLHFCQUFxQixFQUFFLENBQUM7QUFDL0IsSUFBQyxDQUFDLENBaEZJO0FBQUM7aUNBRE4sVUFBVSwzQ0FDbUI7Ozs7O2dEQUcyQjtBQUFDLElBK0UxRCwyQkFBQztBQUNBLENBREEsQUFuRkQsSUFtRkM7QUFDRCxTQW5GYSxvQkFBb0I7QUFFakM7QUFDUTtBQUFRO0FBRUY7QUFHWDtBQUFnQjtBQUNuQixJQUpDLG1DQUFvQjtBQUNyQjtBQUVFO0FBRUY7QUFBaUI7QUFFYjtBQUNHLElBSE4seUNBQTBCO0FBQzNCO0FBRUU7QUFFRjtBQUFpQjtBQUdoQjtBQUFRLElBSFIsdUNBQXdCO0FBQ3pCO0FBRUU7QUFFRjtBQUFpQjtBQUFnQjtBQUFRLElBQXhDLHFEQUEwQztBQUMzQztBQUNDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuXG4vKipcbiAqIE5vdGlmaWVyIHRpbWVyIHNlcnZpY2VcbiAqXG4gKiBUaGlzIHNlcnZpY2UgYWN0cyBhcyBhIHRpbWVyLCBuZWVkZWQgZHVlIHRvIHRoZSBzdGlsbCByYXRoZXIgbGltaXRlZCBzZXRUaW1lb3V0IEphdmFTY3JpcHQgQVBJLiBUaGUgdGltZXIgc2VydmljZSBjYW4gc3RhcnQgYW5kIHN0b3AgYVxuICogdGltZXIuIEZ1cnRoZXJtb3JlLCBpdCBjYW4gYWxzbyBwYXVzZSB0aGUgdGltZXIgYXQgYW55IHRpbWUsIGFuZCByZXN1bWUgbGF0ZXIgb24uIFRoZSB0aW1lciBBUEkgd29ya2QgcHJvbWlzZS1iYXNlZC5cbiAqL1xuQEluamVjdGFibGUoKVxuZXhwb3J0IGNsYXNzIE5vdGlmaWVyVGltZXJTZXJ2aWNlIHtcblxuXHQvKipcblx0ICogVGltZXN0YW1wIChpbiBtcyksIGNyZWF0ZWQgaW4gdGhlIG1vbWVudCB0aGUgdGltZXIgc3RhcnRzXG5cdCAqL1xuXHRwcml2YXRlIG5vdzogbnVtYmVyO1xuXG5cdC8qKlxuXHQgKiBSZW1haW5pbmcgdGltZSAoaW4gbXMpXG5cdCAqL1xuXHRwcml2YXRlIHJlbWFpbmluZzogbnVtYmVyO1xuXG5cdC8qKlxuXHQgKiBUaW1lb3V0IElELCB1c2VkIGZvciBjbGVhcmluZyB0aGUgdGltZW91dCBsYXRlciBvblxuXHQgKi9cblx0cHJpdmF0ZSB0aW1lcklkOiBudW1iZXI7XG5cblx0LyoqXG5cdCAqIFByb21pc2UgcmVzb2x2ZSBmdW5jdGlvbiwgZXZlbnR1YWxseSBnZXR0aW5nIGNhbGxlZCBvbmNlIHRoZSB0aW1lciBmaW5pc2hlc1xuXHQgKi9cblx0cHJpdmF0ZSBmaW5pc2hQcm9taXNlUmVzb2x2ZXI6ICgpID0+IHZvaWQ7XG5cblx0LyoqXG5cdCAqIENvbnN0cnVjdG9yXG5cdCAqL1xuXHRwdWJsaWMgY29uc3RydWN0b3IoKSB7XG5cdFx0dGhpcy5ub3cgPSAwO1xuXHRcdHRoaXMucmVtYWluaW5nID0gMDtcblx0fVxuXG5cdC8qKlxuXHQgKiBTdGFydCAob3IgcmVzdW1lKSB0aGUgdGltZXJcblx0ICpcblx0ICogQHBhcmFtICAgZHVyYXRpb24gVGltZXIgZHVyYXRpb24sIGluIG1zXG5cdCAqIEByZXR1cm5zICAgICAgICAgIFByb21pc2UsIHJlc29sdmVkIG9uY2UgdGhlIHRpbWVyIGZpbmlzaGVzXG5cdCAqL1xuXHRwdWJsaWMgc3RhcnQoIGR1cmF0aW9uOiBudW1iZXIgKTogUHJvbWlzZTx1bmRlZmluZWQ+IHtcblx0XHRyZXR1cm4gbmV3IFByb21pc2U8dW5kZWZpbmVkPiggKCByZXNvbHZlOiAoKSA9PiB2b2lkLCByZWplY3Q6ICgpID0+IHZvaWQgKSA9PiB7XG5cblx0XHRcdC8vIEZvciB0aGUgZmlyc3QgcnVuIC4uLlxuXHRcdFx0dGhpcy5yZW1haW5pbmcgPSBkdXJhdGlvbjtcblxuXHRcdFx0Ly8gU2V0dXAsIHRoZW4gc3RhcnQgdGhlIHRpbWVyXG5cdFx0XHR0aGlzLmZpbmlzaFByb21pc2VSZXNvbHZlciA9IHJlc29sdmU7XG5cdFx0XHR0aGlzLmNvbnRpbnVlKCk7XG5cblx0XHR9ICk7XG5cdH1cblxuXHQvKipcblx0ICogUGF1c2UgdGhlIHRpbWVyXG5cdCAqL1xuXHRwdWJsaWMgcGF1c2UoKTogdm9pZCB7XG5cdFx0Y2xlYXJUaW1lb3V0KCB0aGlzLnRpbWVySWQgKTtcblx0XHR0aGlzLnJlbWFpbmluZyAtPSBuZXcgRGF0ZSgpLmdldFRpbWUoKSAtIHRoaXMubm93O1xuXHR9XG5cblx0LyoqXG5cdCAqIENvbnRpbnVlIHRoZSB0aW1lclxuXHQgKi9cblx0cHVibGljIGNvbnRpbnVlKCk6IHZvaWQge1xuXHRcdHRoaXMubm93ID0gbmV3IERhdGUoKS5nZXRUaW1lKCk7XG5cdFx0dGhpcy50aW1lcklkID0gd2luZG93LnNldFRpbWVvdXQoICgpID0+IHtcblx0XHRcdHRoaXMuZmluaXNoKCk7XG5cdFx0fSwgdGhpcy5yZW1haW5pbmcgKTtcblx0fVxuXG5cdC8qKlxuXHQgKiBTdG9wIHRoZSB0aW1lclxuXHQgKi9cblx0cHVibGljIHN0b3AoKTogdm9pZCB7XG5cdFx0Y2xlYXJUaW1lb3V0KCB0aGlzLnRpbWVySWQgKTtcblx0XHR0aGlzLnJlbWFpbmluZyA9IDA7XG5cdH1cblxuXHQvKipcblx0ICogRmluaXNoIHVwIHRoZSB0aW1lb3V0IGJ5IHJlc29sdmluZyB0aGUgdGltZXIgcHJvbWlzZVxuXHQgKi9cblx0cHJpdmF0ZSBmaW5pc2goKTogdm9pZCB7XG5cdFx0dGhpcy5maW5pc2hQcm9taXNlUmVzb2x2ZXIoKTtcblx0fVxuXG59XG4iXX0=