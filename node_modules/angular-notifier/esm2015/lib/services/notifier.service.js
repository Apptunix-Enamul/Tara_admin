/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Inject, Injectable } from '@angular/core';
import { NotifierConfig } from '../models/notifier-config.model';
import { NotifierQueueService } from './notifier-queue.service';
import { NotifierConfigToken } from '../notifier.tokens';
/**
 * Notifier service
 *
 * This service provides access to the public notifier API. Once injected into a component, directive, pipe, service, or any other building
 * block of an applications, it can be used to show new notifications, and hide existing ones. Internally, it transforms API calls into
 * actions, which then get thrown into the action queue - eventually being processed at the right moment.
 */
import * as ɵngcc0 from '@angular/core';
export class NotifierService {
    /**
     * Constructor
     *
     * @param {?} notifierQueueService Notifier queue service
     * @param {?} config               Notifier configuration, optionally injected as a dependency
     */
    constructor(notifierQueueService, config) {
        this.queueService = notifierQueueService;
        this.config = config;
    }
    /**
     * Get the notifier configuration
     *
     * @return {?} Notifier configuration
     */
    getConfig() {
        return this.config;
    }
    /**
     * API: Show a new notification
     *
     * @param {?} notificationOptions Notification options
     * @return {?}
     */
    show(notificationOptions) {
        this.queueService.push({
            payload: notificationOptions,
            type: 'SHOW'
        });
    }
    /**
     * API: Hide a specific notification, given its ID
     *
     * @param {?} notificationId ID of the notification to hide
     * @return {?}
     */
    hide(notificationId) {
        this.queueService.push({
            payload: notificationId,
            type: 'HIDE'
        });
    }
    /**
     * API: Hide the newest notification
     * @return {?}
     */
    hideNewest() {
        this.queueService.push({
            type: 'HIDE_NEWEST'
        });
    }
    /**
     * API: Hide the oldest notification
     * @return {?}
     */
    hideOldest() {
        this.queueService.push({
            type: 'HIDE_OLDEST'
        });
    }
    /**
     * API: Hide all notifications at once
     * @return {?}
     */
    hideAll() {
        this.queueService.push({
            type: 'HIDE_ALL'
        });
    }
    /**
     * API: Shortcut for showing a new notification
     *
     * @param {?} type             Type of the notification
     * @param {?} message          Message of the notification
     * @param {?=} notificationId
     * @return {?}
     */
    notify(type, message, notificationId) {
        /** @type {?} */
        let notificationOptions = {
            message,
            type
        };
        if (notificationId !== undefined) {
            notificationOptions.id = notificationId;
        }
        this.show(notificationOptions);
    }
}
NotifierService.ɵfac = function NotifierService_Factory(t) { return new (t || NotifierService)(ɵngcc0.ɵɵinject(NotifierQueueService), ɵngcc0.ɵɵinject(NotifierConfigToken)); };
NotifierService.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: NotifierService, factory: NotifierService.ɵfac });
/** @nocollapse */
NotifierService.ctorParameters = () => [
    { type: NotifierQueueService },
    { type: NotifierConfig, decorators: [{ type: Inject, args: [NotifierConfigToken,] }] }
];
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(NotifierService, [{
        type: Injectable
    }], function () { return [{ type: NotifierQueueService }, { type: NotifierConfig, decorators: [{
                type: Inject,
                args: [NotifierConfigToken]
            }] }]; }, null); })();
if (false) {
    /**
     * Notifier queue service
     * @type {?}
     * @private
     */
    NotifierService.prototype.queueService;
    /**
     * Notifier configuration
     * @type {?}
     * @private
     */
    NotifierService.prototype.config;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibm90aWZpZXIuc2VydmljZS5qcyIsInNvdXJjZXMiOlsibmc6L2FuZ3VsYXItbm90aWZpZXIvbGliL3NlcnZpY2VzL25vdGlmaWVyLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBRSxNQUFNLEVBQUUsVUFBVSxFQUFjLE1BQU0sZUFBZSxDQUFDO0FBRS9ELE9BQU8sRUFBRSxjQUFjLEVBQUUsTUFBTSxpQ0FBaUMsQ0FBQztBQUVqRSxPQUFPLEVBQUUsb0JBQW9CLEVBQUUsTUFBTSwwQkFBMEIsQ0FBQztBQUNoRSxPQUFPLEVBQUUsbUJBQW1CLEVBQUUsTUFBTSxvQkFBb0IsQ0FBQztBQUN6RDtBQUNHO0FBQ2dCO0FBQ2pCO0FBQ3lJO0FBQ0o7QUFDOUI7O0FBR3pHLE1BQU0sT0FBTyxlQUFlO0FBQzVCO0FBRUU7QUFBbUI7QUFDcEI7QUFHRTtBQU9GO0FBQ0ksSUFHSixZQUNDLG9CQUEwQyxFQUNiLE1BQXNCO0FBQ2xELFFBQ0QsSUFBSSxDQUFDLFlBQVksR0FBRyxvQkFBb0IsQ0FBQztBQUMzQyxRQUFFLElBQUksQ0FBQyxNQUFNLEdBQUcsTUFBTSxDQUFDO0FBQ3ZCLElBQUMsQ0FBQztBQUNGO0FBRUU7QUFFRDtBQUFPO0FBRUM7QUFBUSxJQUFULFNBQVM7QUFBSyxRQUNwQixPQUFPLElBQUksQ0FBQyxNQUFNLENBQUM7QUFDckIsSUFBQyxDQUFDO0FBQ0Y7QUFFRTtBQUVEO0FBQU87QUFFRTtBQUFtQjtBQUFRLElBQTdCLElBQUksQ0FBRSxtQkFBZ0Q7QUFBSSxRQUNoRSxJQUFJLENBQUMsWUFBWSxDQUFDLElBQUksQ0FBRTtBQUMxQixZQUFHLE9BQU8sRUFBRSxtQkFBbUI7QUFDL0IsWUFBRyxJQUFJLEVBQUUsTUFBTTtBQUNmLFNBQUcsQ0FBRSxDQUFDO0FBQ04sSUFBQyxDQUFDO0FBQ0Y7QUFFRTtBQUVEO0FBQU87QUFFRTtBQUFtQjtBQUFRLElBQTdCLElBQUksQ0FBRSxjQUFzQjtBQUFJLFFBQ3RDLElBQUksQ0FBQyxZQUFZLENBQUMsSUFBSSxDQUFFO0FBQzFCLFlBQUcsT0FBTyxFQUFFLGNBQWM7QUFDMUIsWUFBRyxJQUFJLEVBQUUsTUFBTTtBQUNmLFNBQUcsQ0FBRSxDQUFDO0FBQ04sSUFBQyxDQUFDO0FBQ0Y7QUFFRTtBQUVGO0FBQW1CO0FBQVEsSUFBbkIsVUFBVTtBQUFLLFFBQ3JCLElBQUksQ0FBQyxZQUFZLENBQUMsSUFBSSxDQUFFO0FBQzFCLFlBQUcsSUFBSSxFQUFFLGFBQWE7QUFDdEIsU0FBRyxDQUFFLENBQUM7QUFDTixJQUFDLENBQUM7QUFDRjtBQUVFO0FBRUY7QUFBbUI7QUFBUSxJQUFuQixVQUFVO0FBQUssUUFDckIsSUFBSSxDQUFDLFlBQVksQ0FBQyxJQUFJLENBQUU7QUFDMUIsWUFBRyxJQUFJLEVBQUUsYUFBYTtBQUN0QixTQUFHLENBQUUsQ0FBQztBQUNOLElBQUMsQ0FBQztBQUNGO0FBRUU7QUFFRjtBQUFtQjtBQUNsQixJQURPLE9BQU87QUFBSyxRQUNsQixJQUFJLENBQUMsWUFBWSxDQUFDLElBQUksQ0FBRTtBQUMxQixZQUFHLElBQUksRUFBRSxVQUFVO0FBQ25CLFNBQUcsQ0FBRSxDQUFDO0FBQ04sSUFBQyxDQUFDO0FBQ0Y7QUFFRTtBQUVEO0FBQU87QUFDTztBQUNPO0FBQWtDO0FBRXhEO0FBQVEsSUFBQSxNQUFNLENBQUUsSUFBWSxFQUFFLE9BQWUsRUFBRSxjQUF1QjtBQUFJO0FBQ3hELFlBQVosbUJBQW1CLEdBQWdDO0FBQ3pELFlBQUcsT0FBTztBQUNWLFlBQUcsSUFBSTtBQUNQLFNBQUc7QUFDSCxRQUFFLElBQUssY0FBYyxLQUFLLFNBQVMsRUFBRztBQUN0QyxZQUFHLG1CQUFtQixDQUFDLEVBQUUsR0FBRyxjQUFjLENBQUM7QUFDM0MsU0FBRztBQUNILFFBQUUsSUFBSSxDQUFDLElBQUksQ0FBRSxtQkFBbUIsQ0FBRSxDQUFDO0FBQ25DLElBQUMsQ0FBQztBQUNGOzJDQXhHQyxVQUFVOzZHQUNUO0FBQUM7QUFBbUI7QUFHSSxZQWRqQixvQkFBb0I7QUFBSSxZQUZ4QixjQUFjLHVCQWlDcEIsTUFBTSxTQUFDLG1CQUFtQjtBQUFROzs7Ozs7a0NBQUU7QUFBQztBQUFhO0FBRW5EO0FBQThCO0FBQzNCO0FBQWdCO0FBR3BCLElBckJBLHVDQUFvRDtBQUNyRDtBQUVFO0FBRUY7QUFBaUI7QUFBZ0I7QUFBUSxJQUF4QyxpQ0FBd0M7QUFDekM7QUFDQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdCwgSW5qZWN0YWJsZSwgZm9yd2FyZFJlZiB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuXG5pbXBvcnQgeyBOb3RpZmllckNvbmZpZyB9IGZyb20gJy4uL21vZGVscy9ub3RpZmllci1jb25maWcubW9kZWwnO1xuaW1wb3J0IHsgTm90aWZpZXJOb3RpZmljYXRpb25PcHRpb25zIH0gZnJvbSAnLi4vbW9kZWxzL25vdGlmaWVyLW5vdGlmaWNhdGlvbi5tb2RlbCc7XG5pbXBvcnQgeyBOb3RpZmllclF1ZXVlU2VydmljZSB9IGZyb20gJy4vbm90aWZpZXItcXVldWUuc2VydmljZSc7XG5pbXBvcnQgeyBOb3RpZmllckNvbmZpZ1Rva2VuIH0gZnJvbSAnLi4vbm90aWZpZXIudG9rZW5zJztcblxuLyoqXG4gKiBOb3RpZmllciBzZXJ2aWNlXG4gKlxuICogVGhpcyBzZXJ2aWNlIHByb3ZpZGVzIGFjY2VzcyB0byB0aGUgcHVibGljIG5vdGlmaWVyIEFQSS4gT25jZSBpbmplY3RlZCBpbnRvIGEgY29tcG9uZW50LCBkaXJlY3RpdmUsIHBpcGUsIHNlcnZpY2UsIG9yIGFueSBvdGhlciBidWlsZGluZ1xuICogYmxvY2sgb2YgYW4gYXBwbGljYXRpb25zLCBpdCBjYW4gYmUgdXNlZCB0byBzaG93IG5ldyBub3RpZmljYXRpb25zLCBhbmQgaGlkZSBleGlzdGluZyBvbmVzLiBJbnRlcm5hbGx5LCBpdCB0cmFuc2Zvcm1zIEFQSSBjYWxscyBpbnRvXG4gKiBhY3Rpb25zLCB3aGljaCB0aGVuIGdldCB0aHJvd24gaW50byB0aGUgYWN0aW9uIHF1ZXVlIC0gZXZlbnR1YWxseSBiZWluZyBwcm9jZXNzZWQgYXQgdGhlIHJpZ2h0IG1vbWVudC5cbiAqL1xuQEluamVjdGFibGUoKVxuZXhwb3J0IGNsYXNzIE5vdGlmaWVyU2VydmljZSB7XG5cblx0LyoqXG5cdCAqIE5vdGlmaWVyIHF1ZXVlIHNlcnZpY2Vcblx0ICovXG5cdHByaXZhdGUgcmVhZG9ubHkgcXVldWVTZXJ2aWNlOiBOb3RpZmllclF1ZXVlU2VydmljZTtcblxuXHQvKipcblx0ICogTm90aWZpZXIgY29uZmlndXJhdGlvblxuXHQgKi9cblx0cHJpdmF0ZSByZWFkb25seSBjb25maWc6IE5vdGlmaWVyQ29uZmlnO1xuXG5cdC8qKlxuXHQgKiBDb25zdHJ1Y3RvclxuXHQgKlxuXHQgKiBAcGFyYW0gbm90aWZpZXJRdWV1ZVNlcnZpY2UgTm90aWZpZXIgcXVldWUgc2VydmljZVxuXHQgKiBAcGFyYW0gY29uZmlnICAgICAgICAgICAgICAgTm90aWZpZXIgY29uZmlndXJhdGlvbiwgb3B0aW9uYWxseSBpbmplY3RlZCBhcyBhIGRlcGVuZGVuY3lcblx0ICovXG5cdHB1YmxpYyBjb25zdHJ1Y3Rvcihcblx0XHRub3RpZmllclF1ZXVlU2VydmljZTogTm90aWZpZXJRdWV1ZVNlcnZpY2UsXG5cdFx0QEluamVjdChOb3RpZmllckNvbmZpZ1Rva2VuKSBjb25maWc6IE5vdGlmaWVyQ29uZmlnXG5cdCkge1xuXHRcdHRoaXMucXVldWVTZXJ2aWNlID0gbm90aWZpZXJRdWV1ZVNlcnZpY2U7XG5cdFx0dGhpcy5jb25maWcgPSBjb25maWc7XG5cdH1cblxuXHQvKipcblx0ICogR2V0IHRoZSBub3RpZmllciBjb25maWd1cmF0aW9uXG5cdCAqXG5cdCAqIEByZXR1cm5zIE5vdGlmaWVyIGNvbmZpZ3VyYXRpb25cblx0ICovXG5cdHB1YmxpYyBnZXRDb25maWcoKTogTm90aWZpZXJDb25maWcge1xuXHRcdHJldHVybiB0aGlzLmNvbmZpZztcblx0fVxuXG5cdC8qKlxuXHQgKiBBUEk6IFNob3cgYSBuZXcgbm90aWZpY2F0aW9uXG5cdCAqXG5cdCAqIEBwYXJhbSBub3RpZmljYXRpb25PcHRpb25zIE5vdGlmaWNhdGlvbiBvcHRpb25zXG5cdCAqL1xuXHRwdWJsaWMgc2hvdyggbm90aWZpY2F0aW9uT3B0aW9uczogTm90aWZpZXJOb3RpZmljYXRpb25PcHRpb25zICk6IHZvaWQge1xuXHRcdHRoaXMucXVldWVTZXJ2aWNlLnB1c2goIHtcblx0XHRcdHBheWxvYWQ6IG5vdGlmaWNhdGlvbk9wdGlvbnMsXG5cdFx0XHR0eXBlOiAnU0hPVydcblx0XHR9ICk7XG5cdH1cblxuXHQvKipcblx0ICogQVBJOiBIaWRlIGEgc3BlY2lmaWMgbm90aWZpY2F0aW9uLCBnaXZlbiBpdHMgSURcblx0ICpcblx0ICogQHBhcmFtIG5vdGlmaWNhdGlvbklkIElEIG9mIHRoZSBub3RpZmljYXRpb24gdG8gaGlkZVxuXHQgKi9cblx0cHVibGljIGhpZGUoIG5vdGlmaWNhdGlvbklkOiBzdHJpbmcgKTogdm9pZCB7XG5cdFx0dGhpcy5xdWV1ZVNlcnZpY2UucHVzaCgge1xuXHRcdFx0cGF5bG9hZDogbm90aWZpY2F0aW9uSWQsXG5cdFx0XHR0eXBlOiAnSElERSdcblx0XHR9ICk7XG5cdH1cblxuXHQvKipcblx0ICogQVBJOiBIaWRlIHRoZSBuZXdlc3Qgbm90aWZpY2F0aW9uXG5cdCAqL1xuXHRwdWJsaWMgaGlkZU5ld2VzdCgpOiB2b2lkIHtcblx0XHR0aGlzLnF1ZXVlU2VydmljZS5wdXNoKCB7XG5cdFx0XHR0eXBlOiAnSElERV9ORVdFU1QnXG5cdFx0fSApO1xuXHR9XG5cblx0LyoqXG5cdCAqIEFQSTogSGlkZSB0aGUgb2xkZXN0IG5vdGlmaWNhdGlvblxuXHQgKi9cblx0cHVibGljIGhpZGVPbGRlc3QoKTogdm9pZCB7XG5cdFx0dGhpcy5xdWV1ZVNlcnZpY2UucHVzaCgge1xuXHRcdFx0dHlwZTogJ0hJREVfT0xERVNUJ1xuXHRcdH0gKTtcblx0fVxuXG5cdC8qKlxuXHQgKiBBUEk6IEhpZGUgYWxsIG5vdGlmaWNhdGlvbnMgYXQgb25jZVxuXHQgKi9cblx0cHVibGljIGhpZGVBbGwoKTogdm9pZCB7XG5cdFx0dGhpcy5xdWV1ZVNlcnZpY2UucHVzaCgge1xuXHRcdFx0dHlwZTogJ0hJREVfQUxMJ1xuXHRcdH0gKTtcblx0fVxuXG5cdC8qKlxuXHQgKiBBUEk6IFNob3J0Y3V0IGZvciBzaG93aW5nIGEgbmV3IG5vdGlmaWNhdGlvblxuXHQgKlxuXHQgKiBAcGFyYW0gdHlwZSAgICAgICAgICAgICBUeXBlIG9mIHRoZSBub3RpZmljYXRpb25cblx0ICogQHBhcmFtIG1lc3NhZ2UgICAgICAgICAgTWVzc2FnZSBvZiB0aGUgbm90aWZpY2F0aW9uXG5cdCAqIEBwYXJhbSBbbm90aWZpY2F0aW9uSWRdIFVuaXF1ZSBJRCBmb3IgdGhlIG5vdGlmaWNhdGlvbiAob3B0aW9uYWwpXG5cdCAqL1xuXHRwdWJsaWMgbm90aWZ5KCB0eXBlOiBzdHJpbmcsIG1lc3NhZ2U6IHN0cmluZywgbm90aWZpY2F0aW9uSWQ/OiBzdHJpbmcgKTogdm9pZCB7XG5cdFx0bGV0IG5vdGlmaWNhdGlvbk9wdGlvbnM6IE5vdGlmaWVyTm90aWZpY2F0aW9uT3B0aW9ucyA9IHtcblx0XHRcdG1lc3NhZ2UsXG5cdFx0XHR0eXBlXG5cdFx0fTtcblx0XHRpZiAoIG5vdGlmaWNhdGlvbklkICE9PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRub3RpZmljYXRpb25PcHRpb25zLmlkID0gbm90aWZpY2F0aW9uSWQ7XG5cdFx0fVxuXHRcdHRoaXMuc2hvdyggbm90aWZpY2F0aW9uT3B0aW9ucyApO1xuXHR9XG5cbn1cbiJdfQ==